#2) AND 게이트, NAND 게이트, OR 게이트, XOR 게이트


#### KEYWORD #################################
# 게이트 : 불(bool) 함수로 이루어진 입출력 과정
# net값 : 가중치의 곱과 입력 값 그리고 편향의 총 합.
# 뉴런 : 인공신경망을 구성하는 가장 작은 요소로써 net값이 임계치보다 크면 활성화 되면서 1이 출력되고 반대의 경우는 비활성화되며 0이 출력된다.
#
#
###############################################


#
# 신경망도 입력 값이 들어오면 출력 값이 나오는 하나의 회로라고 볼 수 있다. 때문에 불 함수가 중요한 것.
# 이 불 함수로 이루어진 입 출력 과정을 게이트라고 한다. 따라서 AND 논리회로를 통한 입출력을 AND 게이트 , Not AND 논리회로를 통한 입출력을 NAND 게이트
# OR 논리회로를 통한 입출력을 OR게이트, Exclusive OR 논리 회로를 통한 입출력을 XOR 게이트라고 한다.
#

#NAND GATE############
#  A     B      OUTPUT
#  0     0        1
#  0     1        0
#  1     0        0
#  1     1        0
######################

#XOR GATE#############
#  A     B      OUTPUT
#  0     0         0
#  0     1         1
#  1     0         1
#  1     1         0
######################

# 이 모든 논리 게이트는 퍼셉트론으로 정의 할 수 있다.
# 입력 값이 어떻게 되던 가중치와 임계 값이란 매개변수만 바꿔준다면 같은 구조의 퍼셉트론에서 AND 게이트, NAND 게이트, OR 게이트, XOR 게이트 모두 사용 가능.
# 이 논리 회로를 파이썬에서 구현하면..

#AND게이트 구현
import numpy as np
def AND(x1,x2):
    x = np.array([x1,x2])
    w = np.array([0.5,0.5])
    b = -0.7
    net = np.sum(w*x) + b  #np.sum(w*x) 는 w와 x각 배열의 위치에 맞게 서로 곱해준 뒤에 합해준다는 의미.
    print(net)
    print(np.sum(w*x))
    if net <= 0:
        return 0
    else:
        return 1
AND(2,3)

#NAND게이트 구현
def NAND(x1,x2):
    x = np.array([x1, x2])
    w = np.array([-0.5, -0.5]) #가중치를 array에 저장. 구조는 AND 게이트와 같지만 가중치와 편향값이 다르다. -> 가중치와 편향값을 NOT 시켜줌. -> 부호가 바뀜
    b = 0.7
    net = np.sum(w * x) + b
    if net <= 0:
        return 0
    else:
        return 1
NAND(2,3)
#OR게이트 구현
def OR(x1,x2):
    x = np.array([x1,x2])
    w = np.array([0.5,0.5])
    b = -0.2
    net = np.sum(w*x) + b
    if net <= 0:
        return 0
    else:
        return 1

#위 세가지 논리 게이트는 net값을 선형방정식인 활성 함수로 표현할 수 있었다.
#따라서 파이선 사용자 함수로 손쉽게 구현 가능.
#하지만 XOR 게이트는 선형 방정식으로 표현이 불가능하다.

#XOR에서 선형 방정식 하나로는 0과 1을 구분할 수 없다. 이러한 0과 1을 구분하려면 비선형 영역이 필요하고 대부분의 단층 퍼셉트론은 위와 같은
#XOR게이트 처럼 비선형 영역을 구현할 수 없기 때문에 실질적으로 단층 퍼셉트론은 거의 사용되지 않는다.











