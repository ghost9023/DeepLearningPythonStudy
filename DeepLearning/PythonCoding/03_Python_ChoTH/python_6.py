# CHAPTER 6 클래스
# 객체는 데이터와 코드를 모두 포함한다.
# 객체는 어떤 구체적인 것의 유일한 인스턴스를 나타낸다.
# 예를 들어 값7의 정수객체는 계산을 가능하게 해주고 값8은 또 다른 객체이다.
# 'cat', 'duck' 또한 객체이고 이 객체는 capitalize()나 replace()같은 문자열 메서드를 가지고 있다.
# 쉽게 생각하면 문자열을 문자클래스에 인자값으로 받고 그 안에 있는 메서드를 사용한다고 볼 수있다.
# 아무도 생성하지 않은 새로운 객체를 생성할 때는 무엇을 포함하고 있는지 카리키는 클래스를 생성해야한다.
# 객체는 각각의 사물을 나타내고 메서드는 다른 사물과 어떻게 상호작용하는지 정의한다.
# 객체는 박스, 클래스는 박스를 만드는 틀에 비유할 수 있다.
# 예를 들어 String은 'cat' 같은 객체를 만들수 있는 내장 클래스이다. 그 밖에서 리스트, 튜플을 만드는 여러 클래스가내장되어있음
class Person():
    pass
someone = Person()

# Person()은 Person 클래스로부터 개별객체를 생성하고 someone 변수에 이 객체를 할당한다.
class Person():
    def __init__(self):
        pass
# __init__()는 클래스의 정의로부터 객체를 초기화한다.
# self인자는 객체 자신을 가리킨다. 예약어는 아니다.
class Person():
    def __init__(self, name):
        self.name = name   # name 매개변수를 초기화하는 메서드 추가
hunter = Person('Elmer Fudd')
# Person 클래스의 정의를 찾는다.
# 새 객체를 메모리에 초기화(생성)한다.
# 객체의 __init__() 메서드를 호출한다. 새롭게 생성된 객체를 self에 전달하고, 인자('Elmer Fudd')를 name에 전달한다.
# __더블 언더스코어보고 던더(dunder)라고 부른다.
# 객체에 name값을 저장한다.
# 새로운 객체를 반환한다.
# hunter에 이 객체를 연결한다.
print(hunter.name)   # Person()을 객체화한 hunter 객체의 self.name을 의미한다.
# 모든 클래스 정의에서 __init__()메서드르르 가질 필요는 없다.

# 상속




